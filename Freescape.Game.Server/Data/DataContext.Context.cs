//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Freescape.Game.Server.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DataContext : DbContext
    {
        public DataContext()
            : base("name=DataContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Attribute> Attributes { get; set; }
        public virtual DbSet<AuthorizedDM> AuthorizedDMs { get; set; }
        public virtual DbSet<Background> Backgrounds { get; set; }
        public virtual DbSet<BaseItemType> BaseItemTypes { get; set; }
        public virtual DbSet<BuildingCategory> BuildingCategories { get; set; }
        public virtual DbSet<BuildingInterior> BuildingInteriors { get; set; }
        public virtual DbSet<BuildPrivacyDomain> BuildPrivacyDomains { get; set; }
        public virtual DbSet<ChatChannelsDomain> ChatChannelsDomains { get; set; }
        public virtual DbSet<ChatLog> ChatLogs { get; set; }
        public virtual DbSet<ClientLogEvent> ClientLogEvents { get; set; }
        public virtual DbSet<ClientLogEventTypesDomain> ClientLogEventTypesDomains { get; set; }
        public virtual DbSet<ConstructionSiteComponent> ConstructionSiteComponents { get; set; }
        public virtual DbSet<ConstructionSite> ConstructionSites { get; set; }
        public virtual DbSet<CooldownCategory> CooldownCategories { get; set; }
        public virtual DbSet<CraftBlueprintCategory> CraftBlueprintCategories { get; set; }
        public virtual DbSet<CraftBlueprintComponent> CraftBlueprintComponents { get; set; }
        public virtual DbSet<CraftBlueprint> CraftBlueprints { get; set; }
        public virtual DbSet<CraftDevice> CraftDevices { get; set; }
        public virtual DbSet<CustomEffect> CustomEffects { get; set; }
        public virtual DbSet<DMRoleDomain> DMRoleDomains { get; set; }
        public virtual DbSet<Download> Downloads { get; set; }
        public virtual DbSet<FameRegion> FameRegions { get; set; }
        public virtual DbSet<GameTopicCategory> GameTopicCategories { get; set; }
        public virtual DbSet<GameTopic> GameTopics { get; set; }
        public virtual DbSet<GrowingPlant> GrowingPlants { get; set; }
        public virtual DbSet<Item> Items { get; set; }
        public virtual DbSet<ItemType> ItemTypes { get; set; }
        public virtual DbSet<KeyItemCategory> KeyItemCategories { get; set; }
        public virtual DbSet<KeyItem> KeyItems { get; set; }
        public virtual DbSet<LootTableItem> LootTableItems { get; set; }
        public virtual DbSet<LootTable> LootTables { get; set; }
        public virtual DbSet<NPCGroup> NPCGroups { get; set; }
        public virtual DbSet<PCCooldown> PCCooldowns { get; set; }
        public virtual DbSet<PCCorpseItem> PCCorpseItems { get; set; }
        public virtual DbSet<PCCorps> PCCorpses { get; set; }
        public virtual DbSet<PCCustomEffect> PCCustomEffects { get; set; }
        public virtual DbSet<PCKeyItem> PCKeyItems { get; set; }
        public virtual DbSet<PCMapPin> PCMapPins { get; set; }
        public virtual DbSet<PCMigrationItem> PCMigrationItems { get; set; }
        public virtual DbSet<PCMigration> PCMigrations { get; set; }
        public virtual DbSet<PCOutfit> PCOutfits { get; set; }
        public virtual DbSet<PCOverflowItem> PCOverflowItems { get; set; }
        public virtual DbSet<PCPerk> PCPerks { get; set; }
        public virtual DbSet<PCQuestKillTargetProgress> PCQuestKillTargetProgresses { get; set; }
        public virtual DbSet<PCQuestStatu> PCQuestStatus { get; set; }
        public virtual DbSet<PCRegionalFame> PCRegionalFames { get; set; }
        public virtual DbSet<PCSearchSiteItem> PCSearchSiteItems { get; set; }
        public virtual DbSet<PCSearchSite> PCSearchSites { get; set; }
        public virtual DbSet<PCSkill> PCSkills { get; set; }
        public virtual DbSet<PCTerritoryFlag> PCTerritoryFlags { get; set; }
        public virtual DbSet<PCTerritoryFlagsPermission> PCTerritoryFlagsPermissions { get; set; }
        public virtual DbSet<PCTerritoryFlagsStructure> PCTerritoryFlagsStructures { get; set; }
        public virtual DbSet<PCTerritoryFlagsStructuresItem> PCTerritoryFlagsStructuresItems { get; set; }
        public virtual DbSet<PerkCategory> PerkCategories { get; set; }
        public virtual DbSet<PerkExecutionType> PerkExecutionTypes { get; set; }
        public virtual DbSet<PerkLevel> PerkLevels { get; set; }
        public virtual DbSet<PerkLevelSkillRequirement> PerkLevelSkillRequirements { get; set; }
        public virtual DbSet<Perk> Perks { get; set; }
        public virtual DbSet<Plant> Plants { get; set; }
        public virtual DbSet<PlayerCharacter> PlayerCharacters { get; set; }
        public virtual DbSet<QuestKillTargetList> QuestKillTargetLists { get; set; }
        public virtual DbSet<QuestPrerequisite> QuestPrerequisites { get; set; }
        public virtual DbSet<QuestRequiredItemList> QuestRequiredItemLists { get; set; }
        public virtual DbSet<QuestRequiredKeyItemList> QuestRequiredKeyItemLists { get; set; }
        public virtual DbSet<QuestRewardItem> QuestRewardItems { get; set; }
        public virtual DbSet<Quest> Quests { get; set; }
        public virtual DbSet<QuestState> QuestStates { get; set; }
        public virtual DbSet<QuestTypeDomain> QuestTypeDomains { get; set; }
        public virtual DbSet<ServerConfiguration> ServerConfigurations { get; set; }
        public virtual DbSet<SkillCategory> SkillCategories { get; set; }
        public virtual DbSet<Skill> Skills { get; set; }
        public virtual DbSet<SkillXPRequirement> SkillXPRequirements { get; set; }
        public virtual DbSet<StorageContainer> StorageContainers { get; set; }
        public virtual DbSet<StorageItem> StorageItems { get; set; }
        public virtual DbSet<StructureBlueprint> StructureBlueprints { get; set; }
        public virtual DbSet<StructureCategory> StructureCategories { get; set; }
        public virtual DbSet<StructureComponent> StructureComponents { get; set; }
        public virtual DbSet<StructureQuickBuildAudit> StructureQuickBuildAudits { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TerritoryFlagPermission> TerritoryFlagPermissions { get; set; }
        public virtual DbSet<User> Users { get; set; }
    
        [DbFunction("DataContext", "fn_GetPlayerEffectivePerkLevel")]
        public virtual IQueryable<fn_GetPlayerEffectivePerkLevel_Result> fn_GetPlayerEffectivePerkLevel(string playerID, Nullable<int> perkID, Nullable<int> skillLevel)
        {
            var playerIDParameter = playerID != null ?
                new ObjectParameter("PlayerID", playerID) :
                new ObjectParameter("PlayerID", typeof(string));
    
            var perkIDParameter = perkID.HasValue ?
                new ObjectParameter("PerkID", perkID) :
                new ObjectParameter("PerkID", typeof(int));
    
            var skillLevelParameter = skillLevel.HasValue ?
                new ObjectParameter("SkillLevel", skillLevel) :
                new ObjectParameter("SkillLevel", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_GetPlayerEffectivePerkLevel_Result>("[DataContext].[fn_GetPlayerEffectivePerkLevel](@PlayerID, @PerkID, @SkillLevel)", playerIDParameter, perkIDParameter, skillLevelParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
